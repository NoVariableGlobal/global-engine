#include "InvulnerabilityShield.h"
#include "ComponentsManager.h"
#include "Entity.h"
#include "FactoriesFactory.h"
#include "Factory.h"
#include "LifeC.h"
#include "OgreVector3.h"
#include "PowerUpTrackerC.h"
#include "RigidbodyPC.h"
#include "Scene.h"
#include "TransformComponent.h"
#include "TridimensionalObjectRC.h"

#include <iostream>
#include <json.h>

void InvulnerabilityShield::setEffect(bool value) {
    Entity* player = scene->getEntitybyId("Player");
    auto playerHealth = reinterpret_cast<LifeC*>(player->getComponent("LifeC"));
    playerHealth->setInvulnerability(value);
}

std::string InvulnerabilityShield::getName() { return "InvulnerabilityShield"; }

// FACTORY INFRASTRUCTURE
class InvulnerabilityShieldFactory final : public ComponentFactory {
  public:
    InvulnerabilityShieldFactory() = default;

    Component* create(Entity* _father, Json::Value& _data,
                      Scene* scene) override {
        InvulnerabilityShield* invulnerability_Shield =
            new InvulnerabilityShield();

        invulnerability_Shield->setFather(_father);
        invulnerability_Shield->setScene(scene);
        scene->getComponentsManager()->addEC(invulnerability_Shield);

        if (!_data["time"].isDouble())
            throw std::exception("InvulnerabilityShield: time is not a double");
        invulnerability_Shield->setDuration(_data["time"].asDouble());

        if (!_data["timeEffect"].isDouble())
            throw std::exception(
                "InvulnerabilityShield: timeEffect is not a double");
        invulnerability_Shield->setDuration(_data["timeEffect"].asDouble());

        invulnerability_Shield->setActive(true);

        return invulnerability_Shield;
    };
};

REGISTER_FACTORY("InvulnerabilityShield", InvulnerabilityShield);
