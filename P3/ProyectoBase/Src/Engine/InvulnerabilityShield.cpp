#include "InvulnerabilityShield.h"
#include "ComponentsManager.h"
#include "Entity.h"
#include "FactoriesFactory.h"
#include "LifeC.h"
#include "OgreVector3.h"
#include "RigidbodyPC.h"
#include "Scene.h"
#include "TransformComponent.h"
#include "TridimensionalObjectRC.h"
#include <iostream>
#include <json.h>

InvulnerabilityShield::InvulnerabilityShield() {}

InvulnerabilityShield::~InvulnerabilityShield() {}

void InvulnerabilityShield::destroy() {
    setActive(false);
    scene->getComponentsManager()->eraseEC(this);
}

void InvulnerabilityShield::checkEvent() {
    PowerUpEC::checkEvent();

    if (!picked && getCollisionWithPlayer()) {
        LifeC* playerHealth = dynamic_cast<LifeC*>(
            scene->getEntitybyId("Player")->getComponent("LifeC"));
        playerHealth->setInvulnerability(true);
        picked = true;

        dynamic_cast<TridimensionalObjectRC*>(
            father->getComponent("TridimensionalObjectRC"))
            ->setActive(false);

        dynamic_cast<RigidbodyPC*>(father->getComponent("RigidbodyPC"))
            ->setActive(false);

        dynamic_cast<TransformComponent*>(
            father->getComponent("TransformComponent"))
            ->setActive(false);
    }
    if (!picked) { // delete item when the effect has passed
        if (timeDisappear()) {
            scene->deleteEntity(father);
        }
    } else if (timeDisappearEffect()) { // delete item when the effect has
                                        // passed
        LifeC* playerHealth = dynamic_cast<LifeC*>(
            scene->getEntitybyId("Player")->getComponent("LifeC"));
        playerHealth->setInvulnerability(false);

        scene->deleteEntity(father);
    }
}

void InvulnerabilityShield::setTimeEffect(float _time) { timeEffect = _time; }

bool InvulnerabilityShield::timeDisappearEffect() {
    float seconds = clock() / static_cast<float>(CLOCKS_PER_SEC);

    if (!startPicked) {
        time = seconds;
        startPicked = true;
    }
    if (time + timeEffect <= seconds) {
        return true;
    }

    return false;
}

// FACTORY INFRASTRUCTURE DEFINITION

class InvulnerabilityShieldFactory final : public ComponentFactory {
  public:
    InvulnerabilityShieldFactory() = default;

    Component* create(Entity* _father, Json::Value& _data, Scene* scene) {
        InvulnerabilityShield* invulnerability_Shield =
            new InvulnerabilityShield();

        invulnerability_Shield->setFather(_father);
        invulnerability_Shield->setScene(scene);
        scene->getComponentsManager()->addEC(invulnerability_Shield);

        if (!_data["time"].isDouble())
            throw std::exception("Shield: time is not a double");
        invulnerability_Shield->setDuration(_data["time"].asDouble());

        if (!_data["timeEffect"].isDouble())
            throw std::exception("Shield: timeEffect is not a double");
        invulnerability_Shield->setTimeEffect(_data["timeEffect"].asDouble());

        invulnerability_Shield->setActive(true);

        return invulnerability_Shield;
    };
};

REGISTER_FACTORY(InvulnerabilityShield);
