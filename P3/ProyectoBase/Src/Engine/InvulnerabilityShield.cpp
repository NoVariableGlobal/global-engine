#include "InvulnerabilityShield.h"
#include "Entity.h"
//#include "FloorComponent.h"
#include "ComponentsManager.h"
#include "FactoriesFactory.h"
#include "OgreVector3.h"
#include "Scene.h"
#include "TransformComponent.h"

#include "Factory.h"
#include <json.h>
#include "LifeC.h"
#include <iostream>

InvulnerabilityShield::InvulnerabilityShield(): picked(false) {}

InvulnerabilityShield::~InvulnerabilityShield() {}

void InvulnerabilityShield::update() {
    PowerUpPC::update();

    if (getCollisionWithPlayer()) {
        // attack player
        LifeC* playerHealth = dynamic_cast<LifeC*>(
            scene->getEntitybyId("Player")->getComponent("LifeC"));
        playerHealth->setInvulnerability(false);
        currentDuration = timeEffect;
        picked = true;
    }
    if (picked && currentDuration <= 0) { //delete item when the effect has passed
        
    }
}

void InvulnerabilityShield::setShield() {}

void InvulnerabilityShield::setProbality(float _probality) {
    probality = _probality;
}

void InvulnerabilityShield::setTime(float _time) {
    PowerUpPC::setDuration(_time);
}

void InvulnerabilityShield::setTimeEffect(float _time) { timeEffect = _time; }


// FACTORY INFRASTRUCTURE
class InvulnerabilityShieldFactory final : public ComponentFactory {
  public:
    InvulnerabilityShieldFactory() = default;

    Component* create(Entity* _father, Json::Value& _data,
                      Scene* scene) override {
        InvulnerabilityShield* invulnerability_Shield =
            new InvulnerabilityShield();

        invulnerability_Shield->setFather(_father);
        invulnerability_Shield->setScene(scene);
        scene->getComponentsManager()->addPC(invulnerability_Shield);

        if (!_data["probality"].isDouble())
            throw std::exception("Shield: probality is not a double");
        invulnerability_Shield->setProbality(
            _data["probality"].asDouble());
        if (!_data["time"].isDouble())
            throw std::exception("Shield: time is not a double");
        invulnerability_Shield->setTime(_data["time"].asDouble());

        if (!_data["timeEffect"].isDouble())
            throw std::exception("Shield: timeEffect is not a double");
        invulnerability_Shield->setTimeEffect(_data["timeEffect"].asDouble());

        invulnerability_Shield->setActive(true);

        return invulnerability_Shield;
    };
};

REGISTER_FACTORY("InvulnerabilityShield", InvulnerabilityShield);